package com.board.controller;

import java.util.List;
import java.util.stream.IntStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.board.domain.ReplyVO;
import com.board.mapper.ReplyMapper;
import com.board.service.ReplyService;

import lombok.extern.log4j.Log4j;

@Log4j
@RestController
@RequestMapping("/replies/")
public class ReplyController {
	
	@Autowired
	private ReplyService replyService;
	/*
	 * consumes : 브라우저에서 요청시,  지정한 content-type과 일치해야함.
	 * produces : 서버에서 브라우저에 리턴해주는 데이터의 형태
	 * 			브라우저에서 요청시 지정한 accept 요청헤더값과 일치
	 * 			
	 * */
	//consumes : 사용자가 보낸 데이터가 어떤 방식으로 오는지!
	//produces return해주는 데이터가 뭔지 알려주는 것
	@PostMapping(value = "new", consumes = "application/json", produces= {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> create(@RequestBody ReplyVO vo) {
		
		log.info("reply vo : " + vo);
		int result = replyService.register(vo);
		log.info("insert result : "+ result);
		
		return result == 1 ? new ResponseEntity<>("success", HttpStatus.OK):
							new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	//특정게시물의 댓글목록 확인
	@GetMapping(value="/pages/{bno}/{page}", produces= {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_UTF8_VALUE})
	public ResponseEntity<List<ReplyVO>> getList(
			@PathVariable("page") int page,
			@PathVariable("bno") Long bno){
		
		log.info("getList 요청!!!");
		return;
	}
	
	@GetMapping("test")
	public String test() {
		/*
		IntStream.rangeClosed(2, 10).forEach(i -> {
			ReplyVO vo = new ReplyVO();
			vo.setBno(42L); //실제 board 테이블에 존재하는 bno사용
			vo.setReply("댓글테스트"+i);
			vo.setReplyer("java21");
			
			int result = replyMapper.insert(vo);
		});	
		
		ReplyVO vo =  replyMapper.read(10L);
		System.out.println(vo);
	
		//삭제
		int result = replyMapper.delete(10L);
		System.out.println(result);
		
		
		//수정 : 댓글내용 (reply), 수정일 (updatedate)
		ReplyVO vo = new ReplyVO();
		vo.setRno(1L);
		vo.setReply("댓글테스트1");
		int result = replyMapper.update(vo);
		*/
		
		return "insert result : hello ";
	}
	
	
}
